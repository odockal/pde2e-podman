---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pde2e-podman
  labels:
    app.kubernetes.io/version: "0.1"
    redhat.com/product: podman-desktop
    dev.lifecycle.io/phase: testing
  annotations:
    tekton.dev/pipelines.minVersion: "0.24.x"
    tekton.dev/categories: podman-desktop, podman
    tekton.dev/tags: podman-desktop, podman, testing
    tekton.dev/displayName: "Podman Preparation Task"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task can setup podman and podman machine on the target host machine

  workspaces:
  - name: pipelines-data
  
  params:
  # Target host parameters
  - name: host
    description: host to connect to the provisioned machine
  - name: username
    description: username to connect to the provisioned machine
  - name: userpassword
    description: user password required to run installers with privileges
  - name: key
    description: key file name to connect to the provisioned machine within the workspace resources path   
  - name: os
    description: type of platform per target host (windows, darwin)
    default: windows
  - name: arch
    description: type of arch per target host for windows only amd64, for darwin amd64 or arm64 
    default: amd64
  - name: workspace-resources-path
    description: path on workspace to find resources to connect to the target machine
  # PDE2E Podman parameters
  - name: image-version
    description: pde2e-podman image version
    default: '0.0.3'
  - name: download-url
    description: in case we want to download a specific podman version. We can set up the url
    default: "''"
  - name: podman-version
    description: podman version we are expecting to be included in the archive
    default: "''"
  - name: install-wsl
    description: install WSL on windows
    default: '0'
  - name: podman-initialize
    description: Podman initialization
    default: '0'
  - name: podman-start
    description: Podman machine start param
    default: '0'
  - name: podman-rootful
    description: Initialize rootful podman machine
    default: '0'
  - name: podman-user-networking
    description: Set userModeNetworking flag
    default: '0'
  - name: podman-provider
    description: A podman virtualization provider
    default: "''"
  # Results parameters
  - name: workspace-qe-subpath
    description: subpath relative to workspace path where results are stored
    default: qe-results
  - name: results-folder
    description: directory for the junit file(s) holding the e2e results and other test artifacts
    default: results
  # Control params
  - name: target-cleanup
    description: 'this param controls if folder on target host will be removed. Defaults true'
    default: 'true'

  results:
  - name: duration
    description: total amount of time in seconds for the qe execution
  - name: results-folder-path
    description: gettting path to the results folder into results
  - name: podman-path
    description: podman path to be passed into another task

  steps:
  - name: pd-e2e-podman
    image: quay.io/odockal/pde2e-podman:v$(params.image-version)-$(params.os)
    # We do not have a strict control on versions (as so they can be override)
    # force here to pull everytime just in case it is overriden
    imagePullPolicy: Always
    script: |
      #!/bin/bash

      # This is kept the same as in other tasks
      # Prepare ENVs
      SECONDS=0
      TARGET_HOST=$(params.host)
      TARGET_HOST_USERNAME=$(params.username)
      TARGET_HOST_KEY_PATH=$(workspaces.pipelines-data.path)/$(params.workspace-resources-path)/$(params.key)
      chmod 600 ${TARGET_HOST_KEY_PATH}
      TARGET_FOLDER=pd-e2e
      TARGET_RESULTS=$(params.results-folder)
      TARGET_CLEANUP=$(params.target-cleanup)
      OUTPUT_FOLDER=$(workspaces.pipelines-data.path)/$(params.workspace-resources-path)/$(params.workspace-qe-subpath)
      mkdir -p "${OUTPUT_FOLDER}"
      
      # Create command - command to substitute from GHA workflow using images
      if [[ $(params.os) == "windows" ]]; then
        cmd="${TARGET_FOLDER}/podman.ps1 "
        cmd="$cmd -targetFolder ${TARGET_FOLDER} "
        cmd="$cmd -resultsFolder ${TARGET_RESULTS} "
        cmd="$cmd -downloadUrl $(params.download-url) "
        cmd="$cmd -version $(params.podman-version) "
        cmd="$cmd -installWSL $(params.install-wsl) "
        cmd="$cmd -initialize $(params.podman-initialize) "
        cmd="$cmd -start $(params.podman-start) "
        cmd="$cmd -rootful $(params.podman-rootful) "
        cmd="$cmd -userNetworking $(params.podman-user-networking)"
        if [[ -n "$(params.podman-provider)" ]]; then
          cmd="$cmd -podmanProvider $(params.podman-provider) "
        fi
      fi
      if [[ $(params.os) == "darwin" ]]; then
        cmd="${TARGET_FOLDER}/podman.sh "
        cmd="$cmd --targetFolder ${TARGET_FOLDER} "
        cmd="$cmd --resultsFolder ${TARGET_RESULTS} "
        cmd="$cmd --downloadUrl $(params.download-url) "
        cmd="$cmd --version $(params.podman-version) "
        cmd="$cmd --installWSL $(params.install-wsl) "
        cmd="$cmd --initialize $(params.podman-initialize) "
        cmd="$cmd --start $(params.podman-start) "
        cmd="$cmd --rootful $(params.podman-rootful)"
        if [[ -n "$(params.podman-provider)" ]]; then
          cmd="$cmd --podmanProvider $(params.podman-provider) "
        fi
      fi
      
      # Exec
      . entrypoint.sh "${cmd}"

      # Results
      echo -n "${SECONDS}" | tee $(results.duration.path)
      # use this example to fill the value of the podmanPath into results
      ls -R ${OUTPUT_FOLDER}
      echo -n "$(cat ${OUTPUT_FOLDER}/${TARGET_RESULTS}/podman-location.log)" | tee $(results.podman-path.path)
      
    resources:      
      requests:
        memory: "50Mi"
        cpu: "5m"
      limits:
        memory: "70Mi"
        cpu: "10m"

  sidecars:
  - name: fake-rdp
    image: quay.io/rhqp/frdp:v0.0.1
    imagePullPolicy: Always
    env:
    - name: RDP_HOST
      value: $(params.host)
    - name: RDP_USER
      value: $(params.username)
    - name: RDP_PASSWORD
      value: $(params.userpassword)
    script: |
      #!/bin/sh
      
      # Sidecar is used to create a fake RDP connection, this is only required for windows
      if [[ $(params.os) == "windows" ]]; then
        . entrypoint.sh
      fi
      
    resources:      
      requests:
        memory: "30Mi"
        cpu: "5m"
      limits:
        memory: "70Mi"
        cpu: "10m"